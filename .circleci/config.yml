version: 2
jobs:
  build:
    working_directory: ~/klpdotorg/ilp
    parallelism: 1
    #shell: /bin/bash --login
    environment:
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
      DATABASE_URL: postgresql://ubuntu:@127.0.0.1:5432/test_ilp
      POSTGRES_USER: ubuntu
      POSTGRES_DB: test_ilp
    docker:
    - image: circleci/build-image:ubuntu-14.04-XXL-upstart-1189-5614f37
      command: /sbin/init
    steps:
    - checkout
    - run: mkdir -p $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS
    - run:
        working_directory: ~/klpdotorg/ilp
        command: 'echo ''Asia/Kolkata'' | sudo tee -a /etc/timezone; sudo dpkg-reconfigure
          -f noninteractive tzdata; sudo service mysql restart; sudo service postgresql
          restart; '
   # - run:
        ##command: if ["3.6.1" == "system"] || pyenv versions --bare | grep -x -q '3.6.1'; then pyenv global version;else pyenv install --skip-existing  3.6.1 && pyenv global version && pyenv rehash && pip install virtualenv && pip install nose && pip install pep8 && pyenv rehash;fi
    # Dependencies
    - restore_cache:
        keys:
        # This branch if available
        - v1-dep-{{ .Branch }}-
        # Default branch if not
        - v1-dep-master-
        # Any branch if there are none on the default branch - this should be unnecessary if you have your default branch configured correctly
        - v1-dep-
    # This is based on your 1.0 configuration file or project settings
    - run: sudo apt-get update
    - run: sudo apt-get install -y libgdal-dev
    - run: sudo apt-get install -y postgis
    - run: sudo apt-get install -y postgresql-client
    - run: sudo apt-get install -y python-virtualenv
    - run: source venv/bin/activate && pip install -r requirements.txt
      #  name: install dependencies
      #  command: mkdir -p ./venv && virtualenv ./venv && source venv/bin/activate && pip install -r requirements.txt
    #- run: python3 -m venv venv
    #- run: source venv/bin/activate && pip install -r requirements/test.txt    
    # The following line was run implicitly in your 1.0 builds based on what CircleCI inferred about the structure of your project. In 2.0 you need to be explicit about which commands should be run. In some cases you can discard inferred commands if they are not relevant to your project.
    # You can remove the conditional and simply install the requirements file you use
    - run: if [ -e requirements.txt ]; then pip install -r requirements.txt; else pip install -r requirements.pip; fi
    - run: pip install unittest-xml-reporting
    # Save dependency cache
    - save_cache:
        key: v1-dep-{{ .Branch }}-{{ epoch }}
        paths:
        # This is a broad list of cache paths to include many possible development environments
        # You can probably delete some of these entries
        - vendor/bundle
        - ~/virtualenvs
        - ~/.m2
        - ~/.ivy2
        - ~/.bundle
        - ~/.go_workspace
        - ~/.gradle
        - ~/.cache/bower
        # These cache paths were specified in the 1.0 config
        - venv
    # This is based on your 1.0 configuration file or project settings
    - run: mv ilp/settings/ci_settings.py.sample ilp/settings/ci_settings.py
    # Test
    #   This would typically be a build job when using workflows, possibly combined with build
    # This is based on your 1.0 configuration file or project settings
    - run: . venv/bin/activate && coverage run --source='.' --omit='venv/*' manage.py test boundary users assessments
    - run: . venv/bin/activate && coverage report
    - run: . venv/bin/activate && coverage html
    - run: mkdir -p /tmp/artifacts
    - run: mv htmlcov /tmp/artifacts
    # This is based on your 1.0 configuration file or project settings
    - run: git clean -dxf
    # Deployment
    # Your existing circle.yml file contains deployment steps.
    # The config translation tool does not support translating deployment steps
    # since deployment in CircleCI 2.0 are better handled through workflows.
    # See the documentation for more information https://circleci.com/docs/2.0/workflows/
    # Teardown
    #   If you break your build into multiple jobs with workflows, you will probably want to do the parts of this that are relevant in each
    # Save test results
    - store_test_results:
        path: /tmp/circleci-test-results
    # Save artifacts
    - store_artifacts:
        path: /tmp/circleci-artifacts
    - store_artifacts:
        path: /tmp/artifacts
    - store_artifacts:
        path: /tmp/circleci-test-results
